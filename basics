{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8bccb4dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import torch \n",
    "import pandas as pd\n",
    "import torch.nn as nn\n",
    "from torch.utils.data import Dataset\n",
    "from torch.utils.data import DataLoader\n",
    "import torch.nn.functional as F\n",
    "##from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b619b86e",
   "metadata": {},
   "outputs": [],
   "source": [
    "class LinearRegressionModel(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.linear = nn.Linear(1,1)\n",
    "        \n",
    "    def forward(self,x):\n",
    "        return self.linear(x)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "83deeb64",
   "metadata": {},
   "outputs": [],
   "source": [
    "class CustomDataset(Dataset):\n",
    "    def __init__(self, csv_path):\n",
    "        df_non_del_null = pd.read_csv(csv_path)\n",
    "        df = df_non_del_null.dropna()\n",
    "        self.x_data = df.iloc[:,:1].values\n",
    "        self.y_data = df.iloc[:,1:].values\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.x_data) \n",
    "\n",
    "    def __getitem__(self,idx):\n",
    "        inp = torch.FloatTensor(self.x_data[idx])\n",
    "        outp = torch.FloatTensor(self.y_data[idx])\n",
    "        return inp, outp # 해당하는 idx(인덱스)의 input과 output 데이터를 반환한다.\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3d05603a",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
    }
   ],
   "source": [
    "path = 'C:/Users/dngus/OneDrive - 아주대학교\\바탕 화면/train.csv'\n",
    "\n",
    "Epochs = 1000\n",
    "learning_rate = 1e-5\n",
    "\n",
    "dataset = CustomDataset(path)\n",
    "dataloader = DataLoader(dataset, batch_size=2, shuffle=True)\n",
    "optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)\n",
    "\n",
    "model = LinearRegressionModel()\n",
    "\n",
    "for epoch in range(Epochs + 1):\n",
    "    for batch_idx, samples in enumerate(dataloader):\n",
    "        x_train, y_train = samples\n",
    "\n",
    "    prediction = model(x_train)\n",
    "    cost = F.mse_loss(prediction,y_train)\n",
    "\n",
    "    optimizer.zero_grad()\n",
    "    cost.backward()\n",
    "    optimizer.step()\n",
    "    \n",
    "    print('Epoch {:4d}/{} ## input :{} ## hypothesis: {} ## Cost: {:.6f}'.format(epoch, Epochs,x_train, prediction.squeeze().detach(),cost.item()))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
